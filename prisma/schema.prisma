// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  
  // Add other fields as needed

  // Relation to ChatRoom model (assuming many-to-many relationship)
  chatRooms ChatRoom[]
  // Relation to Message model
  messages  Message[]
}

model ChatRoom {
  id      Int      @id @default(autoincrement())
  name    String
  // Add other fields as needed

  // Users in this chat room
  users   User[]
  // Messages in this chat room
  messages Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  
  // Relation to User model
  sender    User    @relation(fields: [senderId], references: [id])
  senderId  Int
  // Relation to ChatRoom model
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
}

// Define a model for the service
model Service {
  id                  Int               @id @default(autoincrement())
  icon                String?           // Adjust the type based on how you store icons
  title               String
  description         String
  providers           ProviderService[]
  additionalResources AdditionalResource[]
  serviceRequests     ServiceRequest[]
  serviceProviders    ServiceProvider[]

  
}

// Define a model for the service request
model ServiceRequest {
  id             Int            @id @default(autoincrement())
  name           String
  email          String
  details        String
  createdAt      DateTime       @default(now())
  category       ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId     Int
  services       Service[]      // Establish a many-to-many relationship with services
}

// Define a model for the service category
model ServiceCategory {
  id       Int            @id @default(autoincrement())
  name     String
  services ServiceRequest[]
}

// Define a model for the service provider
model Provider {
  id      Int               @id @default(autoincrement())
  name    String
  services ProviderService[]

   
}

// Define an associative entity to represent the relationship between service requests and service providers
model ProviderService {
  id                  Int       @id @default(autoincrement())
  serviceId           Int
  providerId          Int
  service             Service   @relation(fields: [serviceId], references: [id])
  provider            Provider  @relation(fields: [providerId], references: [id])
}

// Define a model for additional resources (URLs to hosted files)
model AdditionalResource {
  id               Int    @id @default(autoincrement())
  name             String
  url              String
  service          Service @relation(fields: [serviceId], references: [id])
  serviceId        Int
}
model ServiceProvider {
  id        Int       @id @default(autoincrement())
  name      String  @default("")
  projects  Project[] 
  links     Link[]
  services  Service @relation(fields: [serviceId], references: [id]) 
  serviceId Int  @default(1)
}

model Project {
  id               Int      @id @default(autoincrement())
  name             String  @default("")
  description      String  @default("")
  serviceProvider  ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId Int
    provider String @default("")
  
}

model Link {
  id              Int      @id @default(autoincrement())
  url             String  @default("")
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId Int
}



